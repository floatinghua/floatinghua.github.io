<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python导出禅道每天的bug</title>
      <link href="/2020/09/14/python%20%E7%88%AC%E8%99%AB%E5%AF%BC%E5%87%BA%E7%A6%85%E9%81%93%E6%AF%8F%E5%A4%A9%E7%9A%84bug/"/>
      <url>/2020/09/14/python%20%E7%88%AC%E8%99%AB%E5%AF%BC%E5%87%BA%E7%A6%85%E9%81%93%E6%AF%8F%E5%A4%A9%E7%9A%84bug/</url>
      
        <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><blockquote><p>有一句话是程序员是最懒的人</p><p>因为公司每天都要写日报，所以自己懒得去禅道复制粘贴，就学了下python 写了个小小的爬虫，用于每天导出bug列表</p><p>当然大手子就看看就好，因为python也是现学现用，所以很多不熟悉</p></blockquote><p>因为很简单，所以我就简单介绍下</p><h5 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h5><ol><li><a href="https://docs.python.org/zh-cn/3.8/tutorial/index.html" target="_blank" rel="noopener">python3</a></li><li><a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">fiddler</a> 抓包必备</li><li><a href="https://www.runoob.com/xpath/xpath-syntax.html" target="_blank" rel="noopener">xpath</a>语法，用来获取感兴趣的节点信息的</li></ol><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><ol><li>首先是通过抓包工具获得登录的消息</li></ol><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200914104759.png" alt=""></p><p>我是直接用的verifyRand加密字符串就没去自己再加密了（因为懒）</p><ol start="2"><li>代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> http.cookiejar <span class="keyword">as</span> cookielib</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree <span class="comment">#XPATH获取节点</span></span><br><span class="line"><span class="keyword">from</span> easyxlsx <span class="keyword">import</span> SimpleWriter <span class="comment">#导出excel</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取session</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># 因为原始的session.cookies 没有save()方法，所以需要用到cookielib中的方法LWPCookieJar，这个类实例化的cookie对象，就可以直接调用save方法。</span></span><br><span class="line">session.cookies = cookielib.LWPCookieJar(filename=<span class="string">"huihuCookies.txt"</span>)</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">"referer"</span>: <span class="string">"/zentao/"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 7fce1c8dbc388855656b6a8f1a41f950</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"account"</span>: <span class="string">"tangfan"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"明文密码"</span>,</span><br><span class="line">    <span class="string">"passwordStrength"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"keepLogin"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"verifyRand"</span>: <span class="string">"加密的字符串，就直接用抓包工具获得"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">resp = session.post(<span class="string">"http://49.4.71.9:30000/zentao/user-login.html"</span>, data=data, headers=header)</span><br><span class="line"><span class="comment"># print(resp.status_code)</span></span><br><span class="line"><span class="comment"># 导出的集合</span></span><br><span class="line">l = []</span><br><span class="line">now = time.strftime(<span class="string">"%Y/%m/%d"</span>, time.localtime())</span><br><span class="line"><span class="comment"># 是否登录成功</span></span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">    session.cookies.save()</span><br><span class="line">    <span class="comment"># 访问个人主页测试</span></span><br><span class="line">    <span class="comment"># my_profile = session.get("http://49.4.71.9:30000/zentao/my-profile.html")</span></span><br><span class="line">    <span class="comment"># 获取每天解决的bug</span></span><br><span class="line">    today_bugs = session.get(<span class="string">"http://49.4.71.9:30000/zentao/my-dynamic.html"</span>)</span><br><span class="line">    <span class="comment"># xpath语法取得今天所有的bug</span></span><br><span class="line">    today_bugs_html = etree.HTML(today_bugs.text)</span><br><span class="line">    content = today_bugs_html.xpath(<span class="string">"//span[@class='timeline-text']/a"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content:</span><br><span class="line">        li = []</span><br><span class="line">        li.append(<span class="string">"1"</span>)</span><br><span class="line">        li.append(<span class="string">"name"</span>)</span><br><span class="line">        li.append(now)</span><br><span class="line">        li.append(now)</span><br><span class="line">        li.insert(<span class="number">0</span>, i.text)</span><br><span class="line">        l.append(li)</span><br><span class="line">    <span class="keyword">if</span> len(l) &gt; <span class="number">0</span>:</span><br><span class="line">        SimpleWriter(l, headers=(<span class="string">'任务名称'</span>, <span class="string">'权重'</span>, <span class="string">'研发人员'</span>, <span class="string">"预计时间"</span>, <span class="string">"完成时间"</span>),</span><br><span class="line">                     bookname=<span class="string">"C:\\Users\\Administrator\\Desktop\\公司项目\\bugs\\bugs.xlsx"</span>).export()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picgo处理hexo博客图片问题</title>
      <link href="/2020/08/28/picgo%E5%A4%84%E7%90%86%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/28/picgo%E5%A4%84%E7%90%86%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="picgo处理hexo博客图片问题"><a href="#picgo处理hexo博客图片问题" class="headerlink" title="picgo处理hexo博客图片问题"></a>picgo处理hexo博客图片问题</h4><blockquote><p>免费！速度快！简单！</p><p>前提之前写博客都是先写好，发表到csdn，然后再发表到自己的博客地址，因为csdn大家都懂，所以今天解决下一直没处理的图片存储问题。</p></blockquote><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>技术上因为用的是hexo，所以盯上了picgo，typor自己就支持所以配置起来很方便</p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828165506.png" alt="image-20200828165505909"></p><p><strong>可以看到下图粘贴图片的一瞬间就上传图片完成了，速度极快</strong></p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828165549.png" alt="image-20200828165549692"></p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>首先需要你下载 <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">picgo</a> ， <a href="https://www.typora.io/" target="_blank" rel="noopener">typora</a>  应该做开发的都知道吧，一款很好用的md编辑器,然后需要你建一个码云仓库，当然你可以选择github（速度慢，容易加载失败），或者七牛云，因为我的七牛云拿去做其他事情了，所以就演示码云。</p><h6 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h6><p>安装好 先下载一个插件 搜索gitee就行</p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828170010.png" alt="image-20200828170010029"></p><p>建好码云仓库，要是开源的，master分支可选，等下配置到master就行</p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828170153.png" alt="image-20200828170153136"></p><p><strong>然后生成自己的令牌一定要记住令牌，因为点击了就不会再次展示了</strong></p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828170303.png" alt="image-20200828170303361"></p><p>然后打开picgo选到gitee 填入自己的仓库地址（<strong>注意仓库地址是你选择克隆下载的那个地址后面的部分</strong>），token信息</p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828170400.png" alt="image-20200828170400477"></p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828170514.png" alt="image-20200828170514110"></p><p>然后打开typora 偏好设置，配置好就行了</p><p><img src="https://gitee.com/float97/wutang-imgs/raw/master/20200828165506.png" alt="image-20200828165505909"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总体来说，很简单，也很便宜，当然你可以选择其他方式，多动脑子。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——单例模式</title>
      <link href="/2020/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="设计模式——单例模式"><a href="#设计模式——单例模式" class="headerlink" title="设计模式——单例模式"></a>设计模式——单例模式</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>单例模式是设计模式中很常见的一种模式，各种框架，系统中都有应用。</p><p><strong>其定义</strong>是单例对象的类只能允许一个实例存在。在许多时候整个系统只需要拥有一个全局对象，这样有利于我们系统系统整体的行为。</p><p>实现主要是以下两个步骤:</p><blockquote><ol><li>将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</li><li>在该类内提供一个静态方法，当我们调用这个方法时，如果该类的引用不为空，就返回该类的引用，如果该类的引用为空，就创建该类的实例，并赋值给该类的引用。</li><li>单例模式可分为有状态的和无状态的。有状态的单例对象一般也是可变的单例对象，多 个单态对象在一起就可以作为一个状态仓库一样向外提供服务。没有状态的单例对象也就是 不变单例对象，仅用做提供工具函数。</li></ol></blockquote><p>适用场景：</p><blockquote><ol><li>需要频繁实例化然后销毁;</li><li>需要生成唯一序列的环境；</li><li>实例化耗时过多，但是又经常用到；</li><li>资源互相通信的环境</li></ol></blockquote><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungryMod</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 指向自己实例的私有静态引用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungryMod mod = <span class="keyword">new</span> HungryMod();</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态工厂方法，提供给外部调用获得实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryMod <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类的加载是按需加载，且加载一次。因此，在上述类被加载时，就是实例化一个对象指向自己的引用；而且类在整个生命周期只会被加载一次，因此只会创建一个实例。</strong></p><h6 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h6><p>​    <strong>优点：</strong></p><blockquote><p>​    写法简单，在类加载时就完成了实例化，避免线程同步问题</p></blockquote><p>​    <strong>缺点：</strong></p><blockquote><p>没有延迟加载，因为这个实例是在类的加载时就创建了，如果没使用就造成了内存浪费</p></blockquote><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMod</span> </span>&#123;</span><br><span class="line"><span class="comment">//    私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMod</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  指向自己的静态实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMod mod=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    提供给外部访问的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  LazyMod <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mod==<span class="keyword">null</span>)&#123;</span><br><span class="line">            mod=<span class="keyword">new</span> LazyMod();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>懒汉式就是延迟加载的，在真正使用的时候才会去创建一个新的实例，指向自己的引用</strong></p><h6 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h6><p>​    <strong>优点：</strong></p><blockquote><p>延迟加载，避免内存的浪费</p></blockquote><p>​    <strong>缺点：</strong></p><blockquote><p>if语句在多线程下，就可能出现多个实例的问题，所以多线程不适用</p></blockquote><p><strong>所以可以在懒汉模式下的静态方法上加一个锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span>  LazyMod <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (mod==<span class="keyword">null</span>)&#123;</span><br><span class="line">           mod=<span class="keyword">new</span> LazyMod();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> mod;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程安全的懒汉模式——这样虽然解决了线程安全问题，但是synchronized效率低。</p></blockquote><h5 id="双重加锁机制"><a href="#双重加锁机制" class="headerlink" title="双重加锁机制"></a>双重加锁机制</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLockMod</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    空指向</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DoubleLockMod mod = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleLockMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleLockMod <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一次检查instance是否被实例化出来，如果没有进入if块</span></span><br><span class="line">        <span class="keyword">if</span> (mod == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            类锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleLockMod<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"><span class="comment">//              某个线程取得了类锁，实例化对象前第二次检查instance是否已经被实例化出来，如果没有，才最终实例出对象</span></span><br><span class="line">                <span class="keyword">if</span> (mod == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mod = <span class="keyword">new</span> DoubleLockMod();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了懒汉式下的线程问题，也解决了效率问题，这是最优秀的方案</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>单例模式在框架，系统中都很常见，也是简单的一种设计模式。当然单例模式还有个邪恶论，单例模式在java系统中存在很多陷阱和假象……</p><p><em>参考</em><br><em>1、高洪岩，Java多线程编程核心技术，机械工业出版社</em></p><p><em>2、<a href="https://www.cnblogs.com/xuwendong/p/9633985.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuwendong/p/9633985.html</a></em></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;设计模式——工厂模式&#39;</title>
      <link href="/2020/08/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="设计模式——工厂模式"><a href="#设计模式——工厂模式" class="headerlink" title="设计模式——工厂模式"></a>设计模式——工厂模式</h4><p>首先不是写给萌新看的，观看前需要有javaSE的基础。文采、绘画水平不佳，还请担待。</p><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><p>   主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提供灵活性的目的。</p><h6 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h6><ol><li><p>主要角色：</p><ol><li><p>工厂类角色：本模式的核心，在java中往往由一个具体类实现</p></li><li><p>抽象产品角色：一般是具体产品继承或者实现的接口，在java中由接口或者抽象类来实现</p></li><li><p>具体产品：工厂类所创建的对象就是此角色的实例</p></li></ol></li></ol><ol start="2"><li>逻辑如下：<br><img src="https://img-blog.csdnimg.cn/20200805160058349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><pre><code>简单工厂模式又称静态工厂方法模式。重命名上就可以看出这个模式一定很简单。</code></pre><p>   <strong>目的</strong>：它存 在的目的很简单：定义一个用于创建对象的接口。</p><ol start="3"><li><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = makePhone();</span><br><span class="line">        phone.describe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title">makePhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MiPhone();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IPhone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiPhone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机进击高端市场了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IPhone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"苹果手机信号不好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>优缺点</p><p><strong>优点：</strong></p><ul><li><p>将创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建，实现了解耦；</p></li><li><p>把初始化实例时的工作放到工厂里进行，使代码更容易维护。 更符合面向对象的原则 &amp; 面向接口编程，而不是面向实现编程。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响；</p></li><li><p>违背“开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</p></li><li><p>简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构。</p></li></ul></li></ul><h6 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h6><ol><li><p>主要角色</p><ol><li>抽象工厂：提供创建产品的接口，调用者通过它访问具体工厂的工厂方法</li><li>具体工厂：实现抽象工厂的方法，完整自己具体产品的创建</li><li>抽象产品：定义产品的规范</li><li>具体产品：实现抽象产品的方法，由具体工程来创建对应的产品</li></ol></li></ol><ol start="2"><li>逻辑如下：<br><img src="https://img-blog.csdnimg.cn/20200805160139541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p>   和简单工厂模式（工厂负责生产所有的产品）相比，工厂方式模式将具体产品的任务分发给具体的产品工厂。</p><p>   <strong>目的：也就是说定义了一个抽象工厂，其定义了产品的生产接口，但是不负责具体的产品，将具体任务分给具体的工厂</strong></p><ol start="3"><li><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MakeCar</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">make</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">descar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzMake</span> <span class="keyword">implements</span> <span class="title">MakeCar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始制造奔驰"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenzCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwMake</span> <span class="keyword">implements</span> <span class="title">MakeCar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始制造宝马"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BMWCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzCar</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">descar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔驰大标好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWCar</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">descar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"宝马操控性好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">        MakeCar make = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//指定具体的工厂来制造</span></span><br><span class="line">            make = <span class="keyword">new</span> BenzMake();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//指定具体的工厂来制造</span></span><br><span class="line">            make = <span class="keyword">new</span> BmwMake();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//得到具体的产品</span></span><br><span class="line">        Car car = make.make();</span><br><span class="line">        <span class="comment">//产品的特点</span></span><br><span class="line">        car.descar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点</p><p><strong>优点：</strong></p><ul><li><p>更符合开-闭原则<br>新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可</p><blockquote><p>简单工厂模式需要修改工厂类的判断逻辑</p></blockquote></li><li><p>符合单一职责原则<br>每个具体工厂类只负责创建对应的产品</p><blockquote><p>简单工厂中的工厂类存在复杂的switch逻辑判断</p></blockquote></li><li><p>不使用静态工厂方法，可以形成基于继承的等级结构。</p><blockquote><p>简单工厂模式的工厂类使用静态工厂方法</p></blockquote></li></ul><p>总结：工厂模式可以说是简单工厂模式的进一步抽象和拓展，在保留了简单工厂的封装优点的同时，让扩展变得简单，让继承变得可行，增加了多态性的体现。</p><p><strong>缺点：</strong></p><ul><li><p>添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；</p></li><li><p>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</p></li><li><p>虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类；</p></li><li><p>一个具体工厂只能创建一种具体产品</p></li></ul></li></ol><h6 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h6><hr><p>   上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品，如果要生产另外一种产品，该怎么办？</p><p>   先来认识下产品族：</p><p>   宝马的跑车，奔驰的跑车，都可以归类到跑车产品，而这个跑车产品就是一个产品族。</p><hr><p>   <strong>抽象工厂模式和工厂方法模式的区别就在于需要创建对象的复杂程度上。而且抽象工厂模式是最为抽象，最具一般性的</strong></p><p>   <strong>目的</strong>：给客户提供一个接口，可以创建多个产品族中的产品对象，而且使用抽象工厂还要满足以下条件：</p><ul><li>系统中有多个产品族，而系统一次只可能消费其中一族产品。</li><li>同属于一个产品族的产品以其使用。</li></ul><ol><li><p>主要角色</p><ol><li>抽象工厂角色：这是工厂方法模式的核心，与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类</li><li>具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。</li><li>抽象产品角色：它是由具体产品继承的父类或者实现的接口。</li><li>具体产品角色：具体工厂角色所创建的对象就是此角色的实例。</li></ol></li><li><p>逻辑如下</p><p><img src="https://img-blog.csdnimg.cn/20200805160221453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><pre><code>抽象产品A、抽象产品B 表示一个产品族（比如下面例子中的手表、随身听），具体工厂1、具体工厂2 就表示一个厂牌的工厂（比如下面例子的小米工厂、sony工厂），那么就简单了，小米工厂生产手表，随身听；sony工厂也可以生产手表，随身听</code></pre><ol start="3"><li><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yx.design_mod.factory.simple;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FactoryUnionAll</span> </span>&#123;</span><br><span class="line">    <span class="function">Watch <span class="title">makeWatch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Walkman <span class="title">makeWalkMan</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Watch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Walkman</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">playMusic</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MibranFactory</span> <span class="keyword">implements</span> <span class="title">FactoryUnionAll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Watch <span class="title">makeWatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始制造小米手表"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MiWatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Walkman <span class="title">makeWalkMan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始制造小米随身听"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MiWalkman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 具体工厂2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SonyFactory</span> <span class="keyword">implements</span> <span class="title">FactoryUnionAll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Watch <span class="title">makeWatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始制造sony手表"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SonyWatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Walkman <span class="title">makeWalkMan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始制造sony随身听"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SonyWalkMan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiWatch</span> <span class="keyword">implements</span> <span class="title">Watch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米滴滴滴"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SonyWatch</span> <span class="keyword">implements</span> <span class="title">Watch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sony 哒哒哒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiWalkman</span> <span class="keyword">implements</span> <span class="title">Walkman</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米音乐卡卡卡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SonyWalkMan</span> <span class="keyword">implements</span> <span class="title">Walkman</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sony nb"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：tangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2020/8/5 15:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FactoryUnionAll mibranFactory = <span class="keyword">new</span> MibranFactory();</span><br><span class="line">        FactoryUnionAll sonyFactory = <span class="keyword">new</span> SonyFactory();</span><br><span class="line"></span><br><span class="line">        mibranFactory.makeWalkMan().playMusic();</span><br><span class="line">        mibranFactory.makeWatch().showTime();</span><br><span class="line"></span><br><span class="line">        sonyFactory.makeWatch().showTime();</span><br><span class="line">        sonyFactory.makeWalkMan().playMusic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点</p><p><strong>优点：</strong></p><ul><li><p>降低耦合<br>抽象工厂模式将具体产品的创建延迟到具体工厂的子类中，这样将对象的创建封装起来，可以减少客户端与具体产品类之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展；</p></li><li><p>更符合开-闭原则<br>新增一种产品类时，只需要增加相应的具体产品类和相应的工厂子类即可</p><blockquote><p>简单工厂模式需要修改工厂类的判断逻辑</p></blockquote></li><li><p>符合单一职责原则<br>每个具体工厂类只负责创建对应的产品</p><blockquote><p>简单工厂中的工厂类存在复杂的switch逻辑判断</p></blockquote></li><li><p>不使用静态工厂方法，可以形成基于继承的等级结构。</p><blockquote><p>简单工厂模式的工厂类使用静态工厂方法</p></blockquote></li></ul><p><strong>缺点：</strong></p><p>抽象工厂模式很难支持新种类产品的变化。<br> 这是因为抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，这样就涉及到抽象工厂类的以及所有子类的改变，这样也就违背了“开发——封闭”原则。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用java-POI导出自定义表格</title>
      <link href="/2020/07/01/%E4%BD%BF%E7%94%A8java-POI%E5%AF%BC%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%A0%BC/"/>
      <url>/2020/07/01/%E4%BD%BF%E7%94%A8java-POI%E5%AF%BC%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>首先看效果图<br><img src="https://img-blog.csdnimg.cn/20200615115725389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>问题</strong>：之前用的是hutool导出excel，可是hutool只能导出稍微简单一点得，复杂的只好自己手动来画了。所以去看了下poi的api学习了下，做了个简单的demo，其中api在这里查看<a href="https://blog.csdn.net/qq_42651904/article/details/88221392" target="_blank" rel="noopener">poi中文文档</a></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如果你用的是hutool的poi-ooxml 版本是4.12,那请自己替换对应方法，就是居中和字体加粗，因为在4.12中没有这些方法，自行更换就行</strong></p><h4 id="本次用到的poi常用的方法："><a href="#本次用到的poi常用的方法：" class="headerlink" title="本次用到的poi常用的方法："></a>本次用到的poi常用的方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">创建excel工作簿对象 </span><br><span class="line">    HSSFWorkbook workbook=<span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">创建工作表对象</span><br><span class="line">    HSSFSheet sheet=workbook.createSheet(<span class="string">"这里可写名字 可不写"</span>);</span><br><span class="line">创建单元格样式</span><br><span class="line">    HSSFCellStyle style=workbook.createCellStyle();</span><br><span class="line">单元格设置颜色</span><br><span class="line">    style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());</span><br><span class="line">style.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line">设置字体才能生效</span><br><span class="line">       style.setFont(font);</span><br><span class="line">    设置水平居中</span><br><span class="line">        <span class="comment">//        左右居中2 居右3 默认居左</span></span><br><span class="line">        style.setAlignment((<span class="keyword">short</span>) align);</span><br><span class="line">    设置上下居中</span><br><span class="line">        <span class="comment">//        上下居中1</span></span><br><span class="line">        style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">设置边框</span><br><span class="line">         style.setBorderRight((<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line"> style.setLocked(<span class="keyword">true</span>);</span><br><span class="line">创建字体</span><br><span class="line">    HSSFFont font=workbook.createFont();</span><br><span class="line">指定字体</span><br><span class="line">        font.setFontName(<span class="string">"宋体"</span>；</span><br><span class="line">    设置字体大小</span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) fontSize);</span><br><span class="line">    设置字体加粗</span><br><span class="line">        font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);</span><br><span class="line">    </span><br><span class="line">创建一行</span><br><span class="line">    HSSFRow row=sheet.createRow(rowNumber);</span><br><span class="line">创建单元格</span><br><span class="line">    HSSFCell cell=row.createCell(cellNumber);</span><br><span class="line">    设置单元格的样式</span><br><span class="line">   cell.setCellStyle(style);</span><br><span class="line">合并列</span><br><span class="line">    sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="string">"合并开始行"</span>,<span class="string">"合并结束行"</span>,<span class="string">"合并开始列"</span>,<span class="string">"合并结束列"</span>))</span><br></pre></td></tr></table></figure><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><p>其实总体上就是几个对象的操作而已,下面就是根据api写的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yx.excel_export_self;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellStyle;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.IndexedColors;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：tangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2020/6/11 10:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExcel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HSSFWorkbook workbook;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HSSFSheet sheet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        根据你传入的字段合并表头</span></span><br><span class="line">        String[] headNames = <span class="keyword">new</span> String[]&#123;<span class="string">"微信昵称"</span>, <span class="string">"姓名"</span>, <span class="string">"性别"</span>,</span><br><span class="line">                <span class="string">"年龄"</span>, <span class="string">"客户身份"</span>, <span class="string">"营养师"</span>, <span class="string">"健康管理师"</span></span><br><span class="line">                , <span class="string">"销售人员"</span>, <span class="string">"服务名称"</span>, <span class="string">"购买时间"</span>, <span class="string">"生效日期"</span>,</span><br><span class="line">                <span class="string">"结束日期"</span>, <span class="string">"注册时间"</span>, <span class="string">"渠道来源"</span>, <span class="string">"勋章"</span>, <span class="string">"预约时间"</span>, <span class="string">"哪里听说"</span>&#125;;</span><br><span class="line">                <span class="comment">//单元格的宽度</span></span><br><span class="line">        <span class="keyword">int</span> colWidths[] = &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">//          创建Excel工作簿对象</span></span><br><span class="line">        workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line"><span class="comment">//          创Excel工作表对象 可以传参自定义名称</span></span><br><span class="line">        sheet = workbook.createSheet(<span class="string">"客户资料导出"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//          创建表头</span></span><br><span class="line">        <span class="keyword">int</span> headCell = createHeadCell(headNames, colWidths);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        workbook.write(baos);</span><br><span class="line">        <span class="keyword">byte</span>[] ba = baos.toByteArray();</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(ba);</span><br><span class="line"></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:\\excel.xls"</span>);</span><br><span class="line">        <span class="keyword">if</span> (f.exists())</span><br><span class="line">            f.delete();</span><br><span class="line">        f.createNewFile();</span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">        HSSFWorkbook book = <span class="keyword">new</span> HSSFWorkbook(bais);</span><br><span class="line">        book.write(out);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建样式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fontSize 字体大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> align    水平位置  左右居中2 居右3 默认居左 垂直均为居中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bold     是否加粗</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HSSFCellStyle <span class="title">getStyle</span><span class="params">(<span class="keyword">int</span> fontSize, <span class="keyword">int</span> align, <span class="keyword">boolean</span> bold, <span class="keyword">boolean</span> border)</span> </span>&#123;</span><br><span class="line">        HSSFFont font = workbook.createFont();</span><br><span class="line"><span class="comment">//        字体</span></span><br><span class="line">        font.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line"><span class="comment">//        字体大小</span></span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) fontSize);</span><br><span class="line">        <span class="keyword">if</span> (bold) &#123;</span><br><span class="line">            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);</span><br><span class="line">        &#125;</span><br><span class="line">        HSSFCellStyle style = workbook.createCellStyle();</span><br><span class="line"><span class="comment">//        设置字体</span></span><br><span class="line">        style.setFont(font);</span><br><span class="line"><span class="comment">//        左右居中2 居右3 默认居左</span></span><br><span class="line">        style.setAlignment((<span class="keyword">short</span>) align);</span><br><span class="line"><span class="comment">//        上下居中1</span></span><br><span class="line">        style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">        <span class="keyword">if</span> (border) &#123;</span><br><span class="line">            style.setBorderRight((<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line">            style.setBorderLeft((<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line">            style.setBorderBottom((<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line">            style.setBorderTop((<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line">            style.setLocked(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建行元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> style  样式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height 行高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value  行显示的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row1   起始行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row2   结束行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> col1   起始列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> col2   结束列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createRow</span><span class="params">(HSSFCellStyle style, <span class="keyword">int</span> height, String value, <span class="keyword">int</span> row1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col1, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(row1, row2, col1, col2));  <span class="comment">//设置从第row1行合并到第row2行，第col1列合并到col2列</span></span><br><span class="line">        HSSFRow rows = sheet.createRow(row1);        <span class="comment">//设置第几行</span></span><br><span class="line">        rows.setHeight((<span class="keyword">short</span>) height);              <span class="comment">//设置行高</span></span><br><span class="line">        HSSFCell cell = rows.createCell(col1);       <span class="comment">//设置内容开始的列</span></span><br><span class="line">        cell.setCellStyle(style);                    <span class="comment">//设置样式</span></span><br><span class="line">        cell.setCellValue(value);                    <span class="comment">//设置该行的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建表头</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headNames</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> colWidths</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">createHeadCell</span><span class="params">(String[] headNames, <span class="keyword">int</span> colWidths[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//         表头标题开始</span></span><br><span class="line"><span class="comment">//        样式</span></span><br><span class="line">        HSSFCellStyle titleStyle = getStyle(<span class="number">15</span>, <span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//        设置颜色</span></span><br><span class="line">        titleStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());</span><br><span class="line">        titleStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建第一行</span></span><br><span class="line">        createRow(titleStyle, <span class="number">500</span>, <span class="string">"基础信息"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, headNames.length - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        表头标题结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        第二行表头开始</span></span><br><span class="line">        <span class="keyword">boolean</span> b = (headNames != <span class="keyword">null</span> &amp;&amp; headNames.length &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            HSSFRow row2 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">            row2.setHeight((<span class="keyword">short</span>) <span class="number">0x289</span>);</span><br><span class="line">            HSSFCell fcell = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//          建立新的cell样式</span></span><br><span class="line">            HSSFCellStyle cellStyle = getStyle(<span class="number">10</span>, <span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headNames.length; i++) &#123;</span><br><span class="line">                fcell = row2.createCell(i);</span><br><span class="line">                fcell.setCellStyle(cellStyle);</span><br><span class="line">                fcell.setCellValue(headNames[i]);</span><br><span class="line">                <span class="keyword">if</span> (colWidths != <span class="keyword">null</span> &amp;&amp; i &lt; colWidths.length) &#123;</span><br><span class="line">                    sheet.setColumnWidth(i, <span class="number">32</span> * colWidths[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //      空一行</span></span><br><span class="line"></span><br><span class="line">        HSSFCellStyle blankStyle = getStyle(<span class="number">20</span>, <span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        createRow(blankStyle, <span class="number">400</span>, <span class="string">""</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, headNames.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        问卷信息</span></span><br><span class="line">        HSSFRow queryTitleRow = sheet.createRow(<span class="number">4</span>);</span><br><span class="line">        HSSFCell cell = queryTitleRow.createCell(<span class="number">0</span>);</span><br><span class="line">        cell.setCellStyle(getStyle(<span class="number">10</span>, <span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">false</span>));</span><br><span class="line">        cell.setCellValue(<span class="string">"问卷信息"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      开始问卷信息详情</span></span><br><span class="line">        HSSFRow queryContentRow = sheet.createRow(<span class="number">5</span>);</span><br><span class="line">        HSSFCellStyle queryContentStyle = getStyle(<span class="number">10</span>, <span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        HSSFCellStyle blankCellStyle = getStyle(<span class="number">10</span>, <span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        queryContentRow.setRowStyle(queryContentStyle);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++) &#123;</span><br><span class="line">            HSSFCell contentCell = queryContentRow.createCell(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HSSFCellStyle style = getStyle(<span class="number">10</span>, <span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//        设置颜色</span></span><br><span class="line">        style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());</span><br><span class="line">        style.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        合并问卷详情的标题</span></span><br><span class="line"><span class="comment">//        健康目标</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        HSSFCell cell1 = queryContentRow.getCell(<span class="number">0</span>);</span><br><span class="line">        cell1.setCellValue(<span class="string">"健康目标"</span>);</span><br><span class="line">        cell1.setCellStyle(style);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        生活习惯</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">        HSSFCell cell2 = queryContentRow.getCell(<span class="number">4</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"生活习惯"</span>);</span><br><span class="line">        cell2.setCellStyle(style);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        身体状况，亲属疾病</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>));</span><br><span class="line">        HSSFCell cell3 = queryContentRow.getCell(<span class="number">8</span>);</span><br><span class="line">        cell3.setCellValue(<span class="string">"身体状况-亲属疾病"</span>);</span><br><span class="line">        cell3.setCellStyle(style);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        体检指标</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">5</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">15</span>));</span><br><span class="line">        HSSFCell cell4 = queryContentRow.getCell(<span class="number">12</span>);</span><br><span class="line">        cell4.setCellValue(<span class="string">"体检指标"</span>);</span><br><span class="line">        cell4.setCellStyle(style);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        用药信息</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">5</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">22</span>));</span><br><span class="line">        HSSFCell cell5 = queryContentRow.getCell(<span class="number">17</span>);</span><br><span class="line">        cell5.setCellValue(<span class="string">"用药信息"</span>);</span><br><span class="line">        cell5.setCellStyle(style);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        每个目标分类下的小标题</span></span><br><span class="line">        HSSFRow queryContentSmallTitle = sheet.createRow(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">23</span>; i++) &#123;</span><br><span class="line">            HSSFCell contentCell = queryContentSmallTitle.createCell(i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        健康目标</span></span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">0</span>).setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">1</span>).setCellValue(<span class="string">"问题"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">2</span>).setCellValue(<span class="string">"内容"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      生活习惯</span></span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">4</span>).setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">5</span>).setCellValue(<span class="string">"问题"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">6</span>).setCellValue(<span class="string">"内容"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        身体状况-亲属疾病</span></span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">8</span>).setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">9</span>).setCellValue(<span class="string">"问题"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">10</span>).setCellValue(<span class="string">"内容"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        体检指标</span></span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">12</span>).setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">13</span>).setCellValue(<span class="string">"类型"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">14</span>).setCellValue(<span class="string">"值"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">15</span>).setCellValue(<span class="string">"参考范围"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        用药信息</span></span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">17</span>).setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">18</span>).setCellValue(<span class="string">"药物名称"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">19</span>).setCellValue(<span class="string">"使用剂量"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">20</span>).setCellValue(<span class="string">"用药频次"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">21</span>).setCellValue(<span class="string">"用药时长"</span>);</span><br><span class="line">        queryContentSmallTitle.getCell(<span class="number">22</span>).setCellValue(<span class="string">"用途"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">8</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">23</span>; j++) &#123;</span><br><span class="line">                sheet.createRow(i).createCell(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从哪一行开始渲染表体</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是全部内容，poi的api还有很多没学习到，Stay hungry,Stay foolish!</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> poi </tag>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux和Windows下集成海康摄像头(特别解决linux加载不到库)</title>
      <link href="/2020/07/01/Linux%E5%92%8CWindows%E4%B8%8B%E9%9B%86%E6%88%90%E6%B5%B7%E5%BA%B7%E6%91%84%E5%83%8F%E5%A4%B4-%E7%89%B9%E5%88%AB%E8%A7%A3%E5%86%B3linux%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%88%B0%E5%BA%93/"/>
      <url>/2020/07/01/Linux%E5%92%8CWindows%E4%B8%8B%E9%9B%86%E6%88%90%E6%B5%B7%E5%BA%B7%E6%91%84%E5%83%8F%E5%A4%B4-%E7%89%B9%E5%88%AB%E8%A7%A3%E5%86%B3linux%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%88%B0%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>最近要集成海康摄像头部署到linux服务器，但是一直调用不到so文件，所以记录下解决过程，<br>由于自己不熟悉jna，所以请轻喷，<strong>Stay Hungry,Stay Foolish.</strong></p><p><a href="https://www.hikvision.com/cn/download_61.html" target="_blank" rel="noopener">海康sdk官方下载地址</a></p><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p><strong><strong>至于为什么先讲linux等下就知道了</strong></strong>，linux的sdk下载下来目录如下：<br><img src="https://img-blog.csdnimg.cn/20200528173418663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ra7VlK6d-1590658348978)(C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528163929984.png)\]"></p><p>开发文档有自己的业务需求就看对应的开放文档</p><p><strong>我们直接看LinuxJavaDemo文件夹</strong></p><p><img src="https://img-blog.csdnimg.cn/20200528173443515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>这边我选择的是方法一，但是不是在系统的/usr/lib文件下，自己新建的文件夹</strong></p><h4 id="linux准备工作"><a href="#linux准备工作" class="headerlink" title="linux准备工作"></a>linux准备工作</h4><ol><li><p>linux下搭配jdk1.8，我这边linux服务器新建了一个目录（<strong>/home/opt/hcnet</strong>）来存放下面的so文件</p></li><li><p>上传文件到linux目录下  就是图中的lib文件,<strong>所有的都上传到你的linux目录</strong> </p><p><img src="https://img-blog.csdnimg.cn/20200528173517359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>创建lib文件夹引入sdk包中的examples.jar和jna.jar<br><img src="https://img-blog.csdnimg.cn/20200528173551673.png" alt="在这里插入图片描述"><br>在pom中添加 不然会报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jna<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>yx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/jna.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jna.examples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>yx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/examples.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包添加如下配置<br><img src="https://img-blog.csdnimg.cn/20200528173624768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>开始集成</p><p><strong>将linux中的HCNetSDK.java放到项目中，修改代码，将他初始化的地方注释掉，我们自己初始化</strong></p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200528173635709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面就是自己的初始化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yx.hkdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Native;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.NativeLong;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Platform;</span><br><span class="line"><span class="keyword">import</span> com.yx.hkdemo.HCNetSDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：tangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2020/5/25 17:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetHCNetSdk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HCNetSDK hcNetSDK = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//windows下的路径</span></span><br><span class="line">    String PATH_WIN = System.getProperty(<span class="string">"user.dir"</span>) + File.separator + <span class="string">"hkwinlib"</span> + File.separator + <span class="string">"HCNetSDK"</span>;</span><br><span class="line">    String PATH_LINUX = <span class="string">"/home/opt/hcnet/libhcnetsdk.so"</span>;</span><br><span class="line">    <span class="keyword">private</span> HCNetSDK.NET_DVR_DEVICEINFO_V30 deviceInfo;<span class="comment">//设备信息</span></span><br><span class="line">    <span class="keyword">private</span> NativeLong lUserID;<span class="comment">//用户句柄</span></span><br><span class="line">    <span class="keyword">private</span> NativeLong lAlarmHandle;<span class="comment">//报警布防句柄</span></span><br><span class="line">    <span class="comment">//    private HCNetSDK.FMSGCallBack_V31 fMSFCallBack_V31;//报警回调函数实现</span></span><br><span class="line">    <span class="keyword">private</span> HCNetSDK.FMSGCallBack fMSFCallBack;<span class="comment">//报警回调函数实现</span></span><br><span class="line">    <span class="keyword">private</span> String deviceIP;<span class="comment">//已登录设备的IP地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> devicePort;<span class="comment">//设备端口号</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//设备用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//设备登陆密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> init_flag;<span class="comment">//初始化识别标志</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> reg_flag;<span class="comment">//设备注册识别标志</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetHCNetSdk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        install();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Platform.isWindows()) &#123;</span><br><span class="line">            hcNetSDK = (HCNetSDK) Native.loadLibrary(PATH_WIN, HCNetSDK<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Platform.isLinux()) &#123;</span><br><span class="line">            hcNetSDK = (HCNetSDK) Native.loadLibrary(PATH_LINUX, HCNetSDK<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果在linux上运行报错，请在linux下的hcNetSDK = (HCNetSDK) Native.loadLibrary(PATH_LINUX, HCNetSDK.class);后面加入官方的这段代码，并且修改成自己的路径，我的是/home/opt/hcnet</strong><br><img src="https://img-blog.csdnimg.cn/20200528173704738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码在下面：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//设置HCNetSDKCom组件库所在路径</span></span><br><span class="line"><span class="comment">//        /home/opt/hcnet/libhcnetsdk.so</span></span><br><span class="line"><span class="comment">//        /home/opt/hcnet</span></span><br><span class="line">            String strPathCom = <span class="string">"/home/opt/hcnet"</span>;</span><br><span class="line">            HCNetSDK.NET_DVR_LOCAL_SDK_PATH struComPath = <span class="keyword">new</span> HCNetSDK.NET_DVR_LOCAL_SDK_PATH();</span><br><span class="line">            System.arraycopy(strPathCom.getBytes(), <span class="number">0</span>, struComPath.sPath, <span class="number">0</span>, strPathCom.length());</span><br><span class="line">            struComPath.write();</span><br><span class="line">            hcNetSDK.NET_DVR_SetSDKInitCfg(<span class="number">2</span>, struComPath.getPointer());</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置libcrypto.so所在路径</span></span><br><span class="line">            HCNetSDK.BYTE_ARRAY ptrByteArrayCrypto = <span class="keyword">new</span> HCNetSDK.BYTE_ARRAY(<span class="number">256</span>);</span><br><span class="line">            String strPathCrypto = <span class="string">"/home/opt/hcnet/libcrypto.so"</span>;</span><br><span class="line">            System.arraycopy(strPathCrypto.getBytes(), <span class="number">0</span>, ptrByteArrayCrypto.byValue, <span class="number">0</span>, strPathCrypto.length());</span><br><span class="line">            ptrByteArrayCrypto.write();</span><br><span class="line">            hcNetSDK.NET_DVR_SetSDKInitCfg(<span class="number">3</span>, ptrByteArrayCrypto.getPointer());</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置libssl.so所在路径</span></span><br><span class="line">            HCNetSDK.BYTE_ARRAY ptrByteArraySsl = <span class="keyword">new</span> HCNetSDK.BYTE_ARRAY(<span class="number">256</span>);</span><br><span class="line">            String strPathSsl = <span class="string">"/home/opt/hcnet/libssl.so"</span>;</span><br><span class="line">            System.arraycopy(strPathSsl.getBytes(), <span class="number">0</span>, ptrByteArraySsl.byValue, <span class="number">0</span>, strPathSsl.length());</span><br><span class="line">            ptrByteArraySsl.write();</span><br><span class="line">            hcNetSDK.NET_DVR_SetSDKInitCfg(<span class="number">4</span>, ptrByteArraySsl.getPointer());</span><br></pre></td></tr></table></figure><ol start="5"><li>编写工具类，自己写方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yx.hkdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jna.NativeLong;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Pointer;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.ptr.IntByReference;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.ptr.NativeLongByReference;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import org.apache.commons.lang.StringUtils;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//import cc.eguid.FFmpegCommandManager.FFmpegManager;</span></span><br><span class="line"><span class="comment">//import cc.eguid.FFmpegCommandManager.FFmpegManagerImpl;</span></span><br><span class="line"><span class="comment">//import com.dfzx.common.util.CommonKit;</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HCNetTools</span> </span>&#123;</span><br><span class="line">    HCNetSDK hCNetSDK = <span class="keyword">null</span>;</span><br><span class="line">    HCNetSDK.NET_DVR_DEVICEINFO_V30 m_strDeviceInfo;<span class="comment">//设备信息</span></span><br><span class="line">    HCNetSDK.NET_DVR_IPPARACFG m_strIpparaCfg;<span class="comment">//IP参数</span></span><br><span class="line">    HCNetSDK.NET_DVR_CLIENTINFO m_strClientInfo;<span class="comment">//用户参数</span></span><br><span class="line">    <span class="keyword">boolean</span> bRealPlay;<span class="comment">//是否在预览.</span></span><br><span class="line">    String m_sDeviceIP;<span class="comment">//已登录设备的IP地址</span></span><br><span class="line">    NativeLong lUserID;<span class="comment">//用户句柄</span></span><br><span class="line">    NativeLong lPreviewHandle;<span class="comment">//预览句柄</span></span><br><span class="line">    NativeLongByReference m_lPort;<span class="comment">//回调预览时播放库端口指针</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HCNetTools</span><span class="params">(HCNetSDK sdk)</span> </span>&#123;</span><br><span class="line">        JPopupMenu.setDefaultLightWeightPopupEnabled(<span class="keyword">false</span>);<span class="comment">//防止被播放窗口(AWT组件)覆盖</span></span><br><span class="line">        lUserID = <span class="keyword">new</span> NativeLong(-<span class="number">1</span>);</span><br><span class="line">        lPreviewHandle = <span class="keyword">new</span> NativeLong(-<span class="number">1</span>);</span><br><span class="line">        m_lPort = <span class="keyword">new</span> NativeLongByReference(<span class="keyword">new</span> NativeLong(-<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">this</span>.hCNetSDK = sdk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    FFmpegManager manager;//rstp转rmtp工具</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//FRealDataCallBack fRealDataCallBack;//预览回调函数实现</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HCNetTools</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JPopupMenu.setDefaultLightWeightPopupEnabled(<span class="keyword">false</span>);<span class="comment">//防止被播放窗口(AWT组件)覆盖</span></span><br><span class="line">        lUserID = <span class="keyword">new</span> NativeLong(-<span class="number">1</span>);</span><br><span class="line">        lPreviewHandle = <span class="keyword">new</span> NativeLong(-<span class="number">1</span>);</span><br><span class="line">        m_lPort = <span class="keyword">new</span> NativeLongByReference(<span class="keyword">new</span> NativeLong(-<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//fRealDataCallBack= new FRealDataCallBack();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化资源配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">initDevices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hCNetSDK.NET_DVR_Init()) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//初始化失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备注册</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name     设备用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 设备登录密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip       IP地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port     端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deviceRegist</span><span class="params">(String name, String password, String ip, String port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bRealPlay) &#123;<span class="comment">//判断当前是否在预览</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//"注册新用户请先停止当前预览";</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lUserID.longValue() &gt; -<span class="number">1</span>) &#123;<span class="comment">//先注销,在登录</span></span><br><span class="line">            hCNetSDK.NET_DVR_Logout_V30(lUserID);</span><br><span class="line">            lUserID = <span class="keyword">new</span> NativeLong(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"注册里面:lUserId:"</span>+lUserID);</span><br><span class="line">        <span class="comment">//注册(既登录设备)开始</span></span><br><span class="line">        m_sDeviceIP = ip;</span><br><span class="line">        m_strDeviceInfo = <span class="keyword">new</span> HCNetSDK.NET_DVR_DEVICEINFO_V30();<span class="comment">//获取设备参数结构</span></span><br><span class="line">        System.out.println(<span class="string">"注册里面：ip:"</span>+m_sDeviceIP+<span class="string">"     info:"</span>+m_strDeviceInfo);</span><br><span class="line">        lUserID = hCNetSDK.NET_DVR_Login_V30(m_sDeviceIP, (<span class="keyword">short</span>) Integer.parseInt(<span class="string">"8000"</span>), name, password, m_strDeviceInfo);<span class="comment">//登录设备</span></span><br><span class="line"><span class="comment">//        NativeLong lUserID, int dwCommand, NativeLong lChannel, Pointer lpInBuffer, int dwInBufferSize</span></span><br><span class="line">        System.out.println(<span class="string">"登录后的id"</span>+lUserID);</span><br><span class="line">        <span class="keyword">int</span> i = hCNetSDK.NET_DVR_GetLastError();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"登录错误代码："</span>+i);</span><br><span class="line">        m_strIpparaCfg = <span class="keyword">new</span> HCNetSDK.NET_DVR_IPPARACFG();</span><br><span class="line">        Pointer lpIpParaConfig = m_strIpparaCfg.getPointer();</span><br><span class="line">        <span class="keyword">boolean</span> b = hCNetSDK.NET_DVR_SetDVRConfig(lUserID, HCNetSDK.NET_DVR_GET_IPPARACFG, <span class="keyword">new</span> NativeLong(<span class="number">0</span>), lpIpParaConfig, m_strIpparaCfg.size());</span><br><span class="line">        <span class="keyword">int</span> seti = hCNetSDK.NET_DVR_GetLastError();</span><br><span class="line">        System.out.println(<span class="string">"setConfig"</span>+seti);</span><br><span class="line">        System.out.println(<span class="string">"b:"</span>+b);</span><br><span class="line">        <span class="keyword">long</span> userID = lUserID.longValue();</span><br><span class="line">        System.out.println(<span class="string">"注册里面：userId:"</span>+userID);</span><br><span class="line">        <span class="keyword">if</span> (userID == -<span class="number">1</span>) &#123;</span><br><span class="line">            m_sDeviceIP = <span class="string">""</span>;<span class="comment">//登录未成功,IP置为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;<span class="comment">//"注册失败";</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取设备通道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChannelNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IntByReference ibrBytesReturned = <span class="keyword">new</span> IntByReference(<span class="number">0</span>);<span class="comment">//获取IP接入配置参数</span></span><br><span class="line">        <span class="keyword">boolean</span> bRet = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> iChannelNum = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        m_strIpparaCfg = <span class="keyword">new</span> HCNetSDK.NET_DVR_IPPARACFG();</span><br><span class="line">        m_strIpparaCfg.write();</span><br><span class="line">        Pointer lpIpParaConfig = m_strIpparaCfg.getPointer();</span><br><span class="line"></span><br><span class="line">        bRet = hCNetSDK.NET_DVR_GetDVRConfig(lUserID, HCNetSDK.NET_DVR_GET_IPPARACFG, <span class="keyword">new</span> NativeLong(<span class="number">0</span>), lpIpParaConfig, m_strIpparaCfg.size(), ibrBytesReturned);</span><br><span class="line">        <span class="keyword">int</span> geti = hCNetSDK.NET_DVR_GetLastError();</span><br><span class="line">        System.out.println(<span class="string">"geti:"</span>+geti);</span><br><span class="line">        m_strIpparaCfg.read();</span><br><span class="line"></span><br><span class="line">        String devices = <span class="string">""</span>;</span><br><span class="line">        System.out.println(<span class="string">"bRet:"</span>+bRet);</span><br><span class="line">        <span class="keyword">if</span> (!bRet) &#123;</span><br><span class="line">            <span class="comment">//设备不支持,则表示没有IP通道</span></span><br><span class="line">            System.out.println(<span class="string">"C:"</span>+m_strDeviceInfo.byChanNum);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> iChannum = <span class="number">0</span>; iChannum &lt; m_strDeviceInfo.byChanNum; iChannum++) &#123;</span><br><span class="line">                devices = <span class="string">"Camera"</span> + (iChannum + m_strDeviceInfo.byStartChan);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"IP"</span>+HCNetSDK.MAX_IP_CHANNEL);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> iChannum = <span class="number">0</span>; iChannum &lt; HCNetSDK.MAX_IP_CHANNEL; iChannum++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_strIpparaCfg.struIPChanInfo[iChannum].byEnable == <span class="number">1</span>) &#123;</span><br><span class="line">                    devices = <span class="string">"IPCamera"</span> + (iChannum + m_strDeviceInfo.byStartChan);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"通道："</span>+devices);</span><br><span class="line">        <span class="keyword">if</span> (devices != <span class="keyword">null</span> &amp;&amp; devices != <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (devices.charAt(<span class="number">0</span>) == <span class="string">'C'</span>) &#123;<span class="comment">//Camara开头表示模拟通道</span></span><br><span class="line">                <span class="comment">//子字符串中获取通道号</span></span><br><span class="line">                System.out.println(<span class="string">"C"</span>);</span><br><span class="line">                iChannelNum = Integer.parseInt(devices.substring(<span class="number">6</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (devices.charAt(<span class="number">0</span>) == <span class="string">'I'</span>) &#123;<span class="comment">//IPCamara开头表示IP通道</span></span><br><span class="line">                    System.out.println(<span class="string">"I"</span>);</span><br><span class="line">                    <span class="comment">//子字符创中获取通道号,IP通道号要加32</span></span><br><span class="line">                    iChannelNum = Integer.parseInt(devices.substring(<span class="number">8</span>)) + <span class="number">32</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> iChannelNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取通道信号状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSignalStatus</span><span class="params">(<span class="keyword">int</span> channum)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取设备状态</span></span><br><span class="line">        HCNetSDK.NET_DVR_WORKSTATE_V30 devwork = <span class="keyword">new</span> HCNetSDK.NET_DVR_WORKSTATE_V30();</span><br><span class="line">        <span class="keyword">if</span> (!hCNetSDK.NET_DVR_GetDVRWorkState_V30(lUserID, devwork)) &#123;</span><br><span class="line">            <span class="comment">//返回Boolean值，判断是否获取设备能力</span></span><br><span class="line">            System.out.println(<span class="string">"返回设备状态失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> devwork.struChanStatic[channum].bySignalStatic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拍照</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">takePic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拍照</span></span><br><span class="line">        HCNetSDK.NET_DVR_JPEGPARA strJpeg = <span class="keyword">new</span> HCNetSDK.NET_DVR_JPEGPARA();</span><br><span class="line">        strJpeg.wPicQuality = <span class="number">1</span>; <span class="comment">//图像参数</span></span><br><span class="line">        strJpeg.wPicSize = <span class="number">2</span>;</span><br><span class="line">        String filePath = <span class="string">"E:\\123q.jpg"</span>;</span><br><span class="line">        lPreviewHandle.setValue(m_strDeviceInfo.byStartChan + <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">boolean</span> b = hCNetSDK.NET_DVR_CaptureJPEGPicture(lUserID, lPreviewHandle, strJpeg, filePath);<span class="comment">//尝试用NET_DVR_CaptureJPEGPicture_NEW方法，但不是报43就是JDK崩溃....</span></span><br><span class="line">        <span class="keyword">if</span> (!b) &#123;<span class="comment">//单帧数据捕获图片</span></span><br><span class="line">            System.out.println(<span class="string">"抓拍失败!"</span> + <span class="string">" err: "</span> + hCNetSDK.NET_DVR_GetLastError());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"抓拍成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放SDK</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDownDev</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果已经注册,注销</span></span><br><span class="line">        <span class="keyword">if</span> (lUserID.longValue() &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            hCNetSDK.NET_DVR_Logout_V30(lUserID);</span><br><span class="line">        &#125;</span><br><span class="line">        hCNetSDK.NET_DVR_Cleanup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   分别调用就行了</p><p>   Linux下运行成功的截图<br><img src="https://img-blog.csdnimg.cn/2020052817405633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="win准备和集成"><a href="#win准备和集成" class="headerlink" title="win准备和集成"></a>win准备和集成</h4><p>上面linux都集成好了，windows就只是需要修改一点东西就好了</p><p>因为我下载的是最新的linux SDK所以HCNetSDK.java就不需要做更改</p><ol><li><p>继续新建文件夹 引入win下面的dll文件 全部引入</p><p><img src="https://img-blog.csdnimg.cn/20200528174109430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><ol start="2"><li>因为上面的初始化类判断了linux和windows系统的，所以直接调用就可以了，因为linux下的sdk中的方法和win的方法基本一致，所以直接用就行了<br><img src="https://img-blog.csdnimg.cn/20200528174502106.png" alt="在这里插入图片描述"></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>集成linux出现的问题就是加载不到库，在摸索官方的sdk后，终于成功，还是自己太年轻，sdk看得不够多</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> springboot </tag>
            
            <tag> 集成 </tag>
            
            <tag> 海康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot2.1.5 整合es6.3.0</title>
      <link href="/2020/07/01/springboot2-1-5-%E6%95%B4%E5%90%88es6-3-0/"/>
      <url>/2020/07/01/springboot2-1-5-%E6%95%B4%E5%90%88es6-3-0/</url>
      
        <content type="html"><![CDATA[<p>搭建环境如下：</p><ol><li>springboot 2.1.5  </li><li>elasticsearch 版本6.3.0</li><li>kibana 版本6.3.0</li><li>IK Analyzer for Elasticsearch 版本 6.3.0</li><li>如需设置账户密码登录要购买es的商业版</li><li>jdk1.8</li></ol><h4 id="安装elasticsearch6-3-0"><a href="#安装elasticsearch6-3-0" class="headerlink" title="安装elasticsearch6.3.0"></a>安装elasticsearch6.3.0</h4><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch" target="_blank" rel="noopener">es6.3.0</a></p><p>下载安装解压后就可以</p><p><strong>启动es 进入安装目录下的bin 运行elasticsearch.bat</strong> 出现如下表示启动成功<br><img src="https://img-blog.csdnimg.cn/20200520100918460.png" alt="在这里插入图片描述"><br>在浏览器中访问默认的端口号 9200 </p><p><img src="https://img-blog.csdnimg.cn/20200520100937208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>以下步骤根据<strong>个人需求</strong> 可以将es安装成windows的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">安装服务</span><br><span class="line">elasticsearch-service.bat install</span><br><span class="line"></span><br><span class="line">删除已安装的es服务</span><br><span class="line">elasticsearch-service.bat remove</span><br><span class="line"></span><br><span class="line">启动es服务</span><br><span class="line">elasticsearch-service.bat start</span><br><span class="line"></span><br><span class="line">停止服务</span><br><span class="line">elasticsearch-service.bat stop</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520100958669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="安装kibana6-3-0"><a href="#安装kibana6-3-0" class="headerlink" title="安装kibana6.3.0"></a>安装kibana6.3.0</h4><p>下载地址:<a href="https://www.elastic.co/cn/downloads/past-releases#kibana" target="_blank" rel="noopener">kibana下载</a></p><p>下载安装解压</p><p><strong>由于是6.X版本不支持修改配置文件来汉化，而且汉化过程不可逆，所以根据个人需求进行汉化</strong></p><p><strong>汉化地址：<a href="https://github.com/anbai-inc/Kibana_Hanization" target="_blank" rel="noopener">https://github.com/anbai-inc/Kibana_Hanization</a></strong></p><p><strong>启动kibana 前提是es已经是启动状态，否则会报错，进入安装目录下的bin 运行kibana .bat</strong>  如下启动成功<br><img src="https://img-blog.csdnimg.cn/20200520101022542.png" alt="在这里插入图片描述"></p><p>访问默认端口5601 成功</p><p><img src="https://img-blog.csdnimg.cn/20200520101035153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h4><p><strong>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">ik分词器下载</a> 版本选择6.3.0</strong></p><p>下载解压到es安装目录下的plugins 新建一个ik文件夹</p><p>重新启动es kibana </p><p>es启动过程中出现 表示插件加载成功</p><p><img src="https://img-blog.csdnimg.cn/20200520101049775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="springboot-整合es"><a href="#springboot-整合es" class="headerlink" title="springboot 整合es"></a>springboot 整合es</h4><pre><code>springboot版本2.1.5</code></pre><p>注意版本冲突 springboot2.1.5 支持的es版本es和kibana版本不对连接不上</p><p><img src="https://img-blog.csdnimg.cn/20200520101108212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>es依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>版本如下</li></ol><p><img src="https://img-blog.csdnimg.cn/20200520101124229.png" alt="在这里插入图片描述"></p><ol start="3"><li><p>配置类</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定默认集群名和ip端口</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">elasticsearch</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">127.0.0.1:9300</span></span><br></pre></td></tr></table></figure></li><li><p>新建实体类</p><p>@Doucument 进行数据存储的基本单元 以json格式存储的记录，indexName 指定创建存储的索引名</p><p>@Mapping 指定resources下面的json文件 来定义分词规则</p><p>@Id 一定要加在主键上</p><p>@Field 指定分词器的名称，只配置了ik分词器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"testmapping"</span>)</span><br><span class="line"><span class="meta">@Mapping</span>(mappingPath = <span class="string">"course_mapping.json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"课程id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"课程名"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//analyzer：分词器名称</span></span><br><span class="line">    <span class="comment">//ik_max_word：会将文本做最细粒度的拆分</span></span><br><span class="line">    <span class="comment">//ik_smart：会将文本做最粗粒度的拆分</span></span><br><span class="line">    <span class="meta">@Field</span>(analyzer = <span class="string">"ik_max_word"</span>, searchAnalyzer = <span class="string">"ik_max_word"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"教师id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在resources下面建立指定的json文件</p><p>在需要分词的属性下加上 analyzer和search_analyzer 并指定分词格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"demo"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"cid"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">        <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"teacherId"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存储优化分词</strong>，就是将ElasticSearch文档中字段值按照一定的切分规则分为多个待匹配靶点，只有搜索关键词命中其中的靶点才会将该字段值对应的文档放在返回结果中。</p></li></ol><p>   <strong>检索优化分词</strong>，就是将用户输入的搜索关键词按照一定的切分规则分为多个靶点，然后根据这些靶点去匹配ElasticSearch中的所有待匹配靶点。根据这些靶点的匹配程度，ElasticSearch会计算得分，根据匹配度即得分情况从高到底返回搜索结果。如果一个靶点都没有匹配上，得分为0即不返回任何结果。</p><p>   <strong>以”中华人民共和国国歌”为例，ik分词的两种分词规则的效果如下：</strong></p><ul><li><code>ik_max_word</code>分词效果：“中华”，“中华人民”，“中华人民共和国”，“人民”，“人民共和国”，“共和”，“共和国”，“华人”，“国”，“国歌”。</li><li><code>ik_smart</code>分词效果：“中华人民共和国”，“国歌”。</li></ul><p>   <strong>上面的具体分词效果可以在kibana中查看</strong></p>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST testmapping/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"field"</span>: <span class="string">"name"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"中华人民共和国国歌"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520101151801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="6"><li><p>编写接口继承ElasticsearchRepository&lt;T, T&gt;传入实体类、主键类型，就可以调用封装的方法</p></li><li><p>编写自己的测试类</p><ol><li><p>第一步创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"><span class="comment">//通过template</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createIndex 创建索引</span></span><br><span class="line">template.createIndex(T<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置索引对应字段的分词规则(根据***.json中的设置开始生效)</span></span><br><span class="line">template.putMapping(T<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>增</p><p>通过刚刚的继承了ElasticsearchRepository的接口调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>.<span class="title">saveAll</span>(<span class="title">Iterable</span>&lt;? <span class="keyword">extends</span> <span class="title">T</span>&gt; <span class="title">entities</span>)</span></span><br><span class="line"><span class="class"><span class="title">interface</span>.<span class="title">save</span>(<span class="title">S</span> <span class="title">entity</span>)</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520101224886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol></li></ol><ol start="3"><li><p>删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deleteById(ID id)</span><br><span class="line">delete(T entity)</span><br><span class="line">deleteAll(Iterable&lt;? extends T&gt; entities)</span><br><span class="line">deleteAll()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//删除索引</span></span><br><span class="line"> template.deleteIndex(T<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520101209408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">findById(Id id)</span><br><span class="line"></span><br><span class="line">existsById(ID id);</span><br><span class="line"></span><br><span class="line">findAll();</span><br><span class="line"></span><br><span class="line">findAllById(Iterable&lt;ID&gt; ids);</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>混合分页排序查询<br>混合搜索指模糊，单个字段查询，匹配所有的，多个字段匹配某一个值，可以设置权重<br>权重官方解释：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/query-time-boosting.html" target="_blank" rel="noopener">权重解释</a></p><pre><code>权重就影响上面提到的匹配度，分数：查询时的权重提升 是可以用来影响相关度的主要工具，任意类型的查询都能接受 boost 参数。将 boost 设置为 2 ，并不代表最终的评分 _score 是原值的两倍；实际的权重值会经过归一化和一些其他内部优化过程。尽管如此，它确实想要表明一个提升值为 2 的句子的重要性是提升值为 1 语句的两倍。</code></pre><p>在实际应用中，无法通过简单的公式得出某个特定查询语句的 “正确” 权重提升值，只能通过不断尝试获得。需要记住的是 boost 只是影响相关度评分的其中一个因子；它还需要与其他因子相互竞争。选择权重，检查结果，如此反复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//混合查询使用</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* matchQuery       : 单个字段查询</span></span><br><span class="line"><span class="comment">* matchAllQuery    : 匹配所有</span></span><br><span class="line"><span class="comment">* multiMatchQuery  : 多个字段匹配某一个值</span></span><br><span class="line"><span class="comment">* wildcardQuery    : 模糊查询</span></span><br><span class="line"><span class="comment">* boost            : 设置权重,数值越大权重越大</span></span><br><span class="line"><span class="comment">**/</span>  </span><br><span class="line"><span class="comment">//        下面可以多个选择</span></span><br><span class="line">        DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();</span><br><span class="line"><span class="comment">//        单个字段查询</span></span><br><span class="line">        QueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(<span class="string">"cname"</span>,reqQueryDto.getCname().toLowerCase());</span><br><span class="line"><span class="comment">//         wildcardQuery    : 模糊查询</span></span><br><span class="line">        QueryBuilder wildcardCodeQuery = QueryBuilders.wildcardQuery(<span class="string">"cname"</span>, reqQueryDto.getCname().toLowerCase());</span><br><span class="line"></span><br><span class="line">        disMaxQueryBuilder.add(wildcardCodeQuery).add(matchQueryBuilder);</span><br><span class="line">        SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line"><span class="comment">//                指定查询方式</span></span><br><span class="line">                .withQuery(disMaxQueryBuilder)</span><br><span class="line"><span class="comment">//                分页</span></span><br><span class="line">                .withPageable(PageRequest.of(reqQueryDto.getPage(), reqQueryDto.getSize()))</span><br><span class="line"><span class="comment">//                排序规则</span></span><br><span class="line">                .withSort(SortBuilders.fieldSort(<span class="string">"cid"</span>).order(SortOrder.DESC))</span><br><span class="line">                .build();</span><br><span class="line">        Page&lt;Course&gt; search = courseInterface.search(searchQuery);</span><br></pre></td></tr></table></figure></li></ol><!-- toc --><p>搭建环境如下：</p><ol><li>springboot 2.1.5  </li><li>elasticsearch 版本6.3.0</li><li>kibana 版本6.3.0</li><li>IK Analyzer for Elasticsearch 版本 6.3.0</li><li>如需设置账户密码登录要购买es的商业版</li><li>jdk1.8</li></ol><h4 id="安装elasticsearch6-3-0-1"><a href="#安装elasticsearch6-3-0-1" class="headerlink" title="安装elasticsearch6.3.0"></a>安装elasticsearch6.3.0</h4><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch" target="_blank" rel="noopener">es6.3.0</a></p><p>下载安装解压后就可以</p><p><strong>启动es 进入安装目录下的bin 运行elasticsearch.bat</strong> 出现如下表示启动成功<br><img src="https://img-blog.csdnimg.cn/20200520100918460.png" alt="在这里插入图片描述"><br>在浏览器中访问默认的端口号 9200 </p><p><img src="https://img-blog.csdnimg.cn/20200520100937208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>以下步骤根据<strong>个人需求</strong> 可以将es安装成windows的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">安装服务</span><br><span class="line">elasticsearch-service.bat install</span><br><span class="line"></span><br><span class="line">删除已安装的es服务</span><br><span class="line">elasticsearch-service.bat remove</span><br><span class="line"></span><br><span class="line">启动es服务</span><br><span class="line">elasticsearch-service.bat start</span><br><span class="line"></span><br><span class="line">停止服务</span><br><span class="line">elasticsearch-service.bat stop</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520100958669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="安装kibana6-3-0-1"><a href="#安装kibana6-3-0-1" class="headerlink" title="安装kibana6.3.0"></a>安装kibana6.3.0</h4><p>下载地址:<a href="https://www.elastic.co/cn/downloads/past-releases#kibana" target="_blank" rel="noopener">kibana下载</a></p><p>下载安装解压</p><p><strong>由于是6.X版本不支持修改配置文件来汉化，而且汉化过程不可逆，所以根据个人需求进行汉化</strong></p><p><strong>汉化地址：<a href="https://github.com/anbai-inc/Kibana_Hanization" target="_blank" rel="noopener">https://github.com/anbai-inc/Kibana_Hanization</a></strong></p><p><strong>启动kibana 前提是es已经是启动状态，否则会报错，进入安装目录下的bin 运行kibana .bat</strong>  如下启动成功<br><img src="https://img-blog.csdnimg.cn/20200520101022542.png" alt="在这里插入图片描述"></p><p>访问默认端口5601 成功</p><p><img src="https://img-blog.csdnimg.cn/20200520101035153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="安装ik分词器-1"><a href="#安装ik分词器-1" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h4><p><strong>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">ik分词器下载</a> 版本选择6.3.0</strong></p><p>下载解压到es安装目录下的plugins 新建一个ik文件夹</p><p>重新启动es kibana </p><p>es启动过程中出现 表示插件加载成功</p><p><img src="https://img-blog.csdnimg.cn/20200520101049775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt=""></p><h4 id="springboot-整合es-1"><a href="#springboot-整合es-1" class="headerlink" title="springboot 整合es"></a>springboot 整合es</h4><pre><code>springboot版本2.1.5</code></pre><p>注意版本冲突 springboot2.1.5 支持的es版本es和kibana版本不对连接不上</p><p><img src="https://img-blog.csdnimg.cn/20200520101108212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt=""></p><ol><li>es依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>版本如下</li></ol><p><img src="https://img-blog.csdnimg.cn/20200520101124229.png" alt="在这里插入图片描述"></p><ol start="3"><li><p>配置类</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定默认集群名和ip端口</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">elasticsearch</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">127.0.0.1:9300</span></span><br></pre></td></tr></table></figure></li><li><p>新建实体类</p><p>@Doucument 进行数据存储的基本单元 以json格式存储的记录，indexName 指定创建存储的索引名</p><p>@Mapping 指定resources下面的json文件 来定义分词规则</p><p>@Id 一定要加在主键上</p><p>@Field 指定分词器的名称，只配置了ik分词器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"testmapping"</span>)</span><br><span class="line"><span class="meta">@Mapping</span>(mappingPath = <span class="string">"course_mapping.json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"课程id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"课程名"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//analyzer：分词器名称</span></span><br><span class="line">    <span class="comment">//ik_max_word：会将文本做最细粒度的拆分</span></span><br><span class="line">    <span class="comment">//ik_smart：会将文本做最粗粒度的拆分</span></span><br><span class="line">    <span class="meta">@Field</span>(analyzer = <span class="string">"ik_max_word"</span>, searchAnalyzer = <span class="string">"ik_max_word"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"教师id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在resources下面建立指定的json文件</p><p>在需要分词的属性下加上 analyzer和search_analyzer 并指定分词格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"demo"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"cid"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">        <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"teacherId"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存储优化分词</strong>，就是将ElasticSearch文档中字段值按照一定的切分规则分为多个待匹配靶点，只有搜索关键词命中其中的靶点才会将该字段值对应的文档放在返回结果中。</p></li></ol><p>   <strong>检索优化分词</strong>，就是将用户输入的搜索关键词按照一定的切分规则分为多个靶点，然后根据这些靶点去匹配ElasticSearch中的所有待匹配靶点。根据这些靶点的匹配程度，ElasticSearch会计算得分，根据匹配度即得分情况从高到底返回搜索结果。如果一个靶点都没有匹配上，得分为0即不返回任何结果。</p><p>   <strong>以”中华人民共和国国歌”为例，ik分词的两种分词规则的效果如下：</strong></p><ul><li><code>ik_max_word</code>分词效果：“中华”，“中华人民”，“中华人民共和国”，“人民”，“人民共和国”，“共和”，“共和国”，“华人”，“国”，“国歌”。</li><li><code>ik_smart</code>分词效果：“中华人民共和国”，“国歌”。</li></ul><p>   <strong>上面的具体分词效果可以在kibana中查看</strong></p>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST testmapping/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"field"</span>: <span class="string">"name"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"中华人民共和国国歌"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520101151801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt=""></p><ol start="6"><li><p>编写接口继承ElasticsearchRepository&lt;T, T&gt;传入实体类、主键类型，就可以调用封装的方法</p></li><li><p>编写自己的测试类</p><ol><li><p>第一步创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"><span class="comment">//通过template</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createIndex 创建索引</span></span><br><span class="line">template.createIndex(T<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置索引对应字段的分词规则(根据***.json中的设置开始生效)</span></span><br><span class="line">template.putMapping(T<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>增</p><p>通过刚刚的继承了ElasticsearchRepository的接口调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>.<span class="title">saveAll</span>(<span class="title">Iterable</span>&lt;? <span class="keyword">extends</span> <span class="title">T</span>&gt; <span class="title">entities</span>)</span></span><br><span class="line"><span class="class"><span class="title">interface</span>.<span class="title">save</span>(<span class="title">S</span> <span class="title">entity</span>)</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520101224886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol></li></ol><ol start="3"><li><p>删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deleteById(ID id)</span><br><span class="line">delete(T entity)</span><br><span class="line">deleteAll(Iterable&lt;? extends T&gt; entities)</span><br><span class="line">deleteAll()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//删除索引</span></span><br><span class="line"> template.deleteIndex(T<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520101209408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">findById(Id id)</span><br><span class="line"></span><br><span class="line">existsById(ID id);</span><br><span class="line"></span><br><span class="line">findAll();</span><br><span class="line"></span><br><span class="line">findAllById(Iterable&lt;ID&gt; ids);</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>混合分页排序查询<br>混合搜索指模糊，单个字段查询，匹配所有的，多个字段匹配某一个值，可以设置权重<br>权重官方解释：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/query-time-boosting.html" target="_blank" rel="noopener">权重解释</a></p><pre><code>权重就影响上面提到的匹配度，分数：查询时的权重提升 是可以用来影响相关度的主要工具，任意类型的查询都能接受 boost 参数。将 boost 设置为 2 ，并不代表最终的评分 _score 是原值的两倍；实际的权重值会经过归一化和一些其他内部优化过程。尽管如此，它确实想要表明一个提升值为 2 的句子的重要性是提升值为 1 语句的两倍。</code></pre><p>在实际应用中，无法通过简单的公式得出某个特定查询语句的 “正确” 权重提升值，只能通过不断尝试获得。需要记住的是 boost 只是影响相关度评分的其中一个因子；它还需要与其他因子相互竞争。选择权重，检查结果，如此反复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//混合查询使用</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* matchQuery       : 单个字段查询</span></span><br><span class="line"><span class="comment">* matchAllQuery    : 匹配所有</span></span><br><span class="line"><span class="comment">* multiMatchQuery  : 多个字段匹配某一个值</span></span><br><span class="line"><span class="comment">* wildcardQuery    : 模糊查询</span></span><br><span class="line"><span class="comment">* boost            : 设置权重,数值越大权重越大</span></span><br><span class="line"><span class="comment">**/</span>  </span><br><span class="line"><span class="comment">//        下面可以多个选择</span></span><br><span class="line">        DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();</span><br><span class="line"><span class="comment">//        单个字段查询</span></span><br><span class="line">        QueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(<span class="string">"cname"</span>,reqQueryDto.getCname().toLowerCase());</span><br><span class="line"><span class="comment">//         wildcardQuery    : 模糊查询</span></span><br><span class="line">        QueryBuilder wildcardCodeQuery = QueryBuilders.wildcardQuery(<span class="string">"cname"</span>, reqQueryDto.getCname().toLowerCase());</span><br><span class="line"></span><br><span class="line">        disMaxQueryBuilder.add(wildcardCodeQuery).add(matchQueryBuilder);</span><br><span class="line">        SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line"><span class="comment">//                指定查询方式</span></span><br><span class="line">                .withQuery(disMaxQueryBuilder)</span><br><span class="line"><span class="comment">//                分页</span></span><br><span class="line">                .withPageable(PageRequest.of(reqQueryDto.getPage(), reqQueryDto.getSize()))</span><br><span class="line"><span class="comment">//                排序规则</span></span><br><span class="line">                .withSort(SortBuilders.fieldSort(<span class="string">"cid"</span>).order(SortOrder.DESC))</span><br><span class="line">                .build();</span><br><span class="line">        Page&lt;Course&gt; search = courseInterface.search(searchQuery);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整合 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识spring</title>
      <link href="/2020/07/01/%E5%88%9D%E8%AF%86spring/"/>
      <url>/2020/07/01/%E5%88%9D%E8%AF%86spring/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架?"></a>什么是框架?</h2><p>在特定的领域将总结的最佳实践编写成固定流程，帮助我们更加高效，更为健壮的编写。</p><ol><li><strong>总结的最佳实践</strong> ，这就表明框架已经是完成了一些特定的功能，自己已经实现了一些功能，不同的框架完成了不同的功能；</li><li><strong>固定流程</strong>，说明框架本身是有一套流程，需要实现的功能按照其流程来，就能达到效果。</li><li><strong>帮助我们</strong>，框架本身是不会运行点，在框架的帮助下，配合其他的程序，框架就能有效的帮助我们省去很多步骤，直接调用其本身，来达到功能的实现。<br><img src="https://img-blog.csdnimg.cn/20191102104307835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="框架与程序员的关系"></li></ol><h2 id="Spring概诉"><a href="#Spring概诉" class="headerlink" title="Spring概诉"></a>Spring概诉</h2><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。</p><p><strong>Spring的核心是控制反转（IoC）和面向切面（AOP）。</strong><br><strong>简单来说，Spring是一个分层的JavaSE/EEfull-stack（一站式）轻量级开源框架。</strong></p><p><del>上面的干货是不是很枯燥，那我们看下Spring</del>   ==集成的模块==</p><h2 id="Spring集成的模块"><a href="#Spring集成的模块" class="headerlink" title="Spring集成的模块"></a>Spring集成的模块</h2><p><img src="https://img-blog.csdnimg.cn/20191102105609500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="Spring集成模块"><br>1 <strong>核心容器</strong></p><ul><li>Spring-beans:IoC的实现，配置文件的访问、创建和管理；</li><li>Spring-core：核心工具包；</li><li>Spring-context：封装IoC容器，提供扩展功能；</li><li>SpEL:Spring的表达式支持</li></ul><p>2.<strong>基础服务</strong></p><ul><li>AOP：面向切面编程的支持；</li><li>Aspect：模块提供了与 AspectJ 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架；</li><li>Instrumentation：字节码操作；</li><li>Messaging：对消息服务的支持</li></ul><p>3.<strong>功能</strong></p><ul><li>transactions:对事务的支持；</li><li>JDBC:Spring对JDBC的封装；</li><li>ORM：Spring对ORM的封装</li></ul><p>4.<strong>WEB</strong></p><ul><li><p>Web 模块提供面向web的基本功能和面向web的应用上下文，比如多部分（multipart）文件上传功能、使用Servlet监听器初始化IoC容器等。它还包括HTTP客户端以及Spring远程调用中与web相关的部分。。</p></li><li><p>Web-MVC 模块为web应用提供了模型视图控制（MVC）和REST Web服务的实现。Spring的MVC框架可以使领域模型代码和web表单完全地分离，且可以与Spring框架的其它所有功能进行集成。</p></li><li><p>Web-Socket 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</p></li><li><p>Web-Portlet 模块提供了用于Portlet环境的MVC实现，并反映了spring-webmvc模块的功能。</p></li></ul><h2 id="Spring的核心理念——IoC容器"><a href="#Spring的核心理念——IoC容器" class="headerlink" title="Spring的核心理念——IoC容器"></a>Spring的核心理念——IoC容器</h2><p>在讲解IoC的时候我们先来回想，之前写MVC三层的时候<br><img src="https://img-blog.csdnimg.cn/20191102113512328.png" alt="之前的MVC三层控制权"><br>IoC:Inversion of Control 控制反转，通俗一点就是控制权由调用的类，转为Spring容器，由Spring容器来==创建实例以及依赖注入==。<br><img src="https://img-blog.csdnimg.cn/20191103104511324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="控制反转"></p><h3 id="Bean的四种实例化"><a href="#Bean的四种实例化" class="headerlink" title="Bean的四种实例化"></a>Bean的四种实例化</h3><p>首先你需要在xml中来，配置bean。</p><ol><li>默认使用的bean就是用的无参构造<br>其中id就表示这个bean的名字，class就是你要创建这个实例的class<br>– <code>&lt;bean id=&quot;userDao&quot; class=&quot;com.demo.dao.UserDaoImpl&quot;/&gt;</code></li><li>静态工厂方法实例化<br>这就运用到一个类中的一个静态方法，这个静态方法get就是用来返回bean的实例<br>– <code>&lt;bean id=&quot;userDao&quot; factory-method=&quot;get&quot;class=&quot;com.UserDaoFactory/&gt;</code></li><li>工厂bean的实例化<br>这个方法就用到了工厂模式，这个工厂的方法get用来生产这个bean的实例<br>– <code>&lt;bean id=&quot;userDaoFactory&quot; class=&quot;com.factory.user.UserDaoFactory&quot;/&gt;    &lt;bean id=&quot;userDao&quot; factory-bean=&quot;userDaoFactory&quot; factory-method=&quot;get&quot;/&gt;</code></li><li>Spring的factorybean接口<br>使用这种方式就是要类已经实现了FactoryBean的接口，然后重写了方法<br><img src="https://img-blog.csdnimg.cn/20191103110313725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>– <code>&lt;bean id=&quot;car&quot; class=&quot;com.demo.dao.CarFactory&quot;/&gt;</code></li></ol><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>依赖注入Spring也给我提供了两种方式</p><ol><li>setter注入<br>– 这个方式就是说，你要实例化的对象，必须要有setter方法来设置，然后才能才bean中进行依赖注入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.demo.service.UserServiceImpl/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;bean id="</span><span class="attr">userController</span>" <span class="attr">class</span>=<span class="string">"com.demo.controller.UserController"</span>&gt;</span></span><br><span class="line">//这里的name其实就是调用的setter方法</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//当然你想注入其他类型的时候也是可以的</span><br><span class="line">//value 注入基本类型</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//list 存放基本类型注入list </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//map集合</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构造器注入<br><img src="https://img-blog.csdnimg.cn/20191103111839165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="构造器注入"><br>==看完了这些实例化和依赖注入，再来看看怎么使用吧==<br><img src="https://img-blog.csdnimg.cn/201911031120165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="容器的使用"><br><strong>其中一般来说全局就一个spring容器</strong></li></ol><h3 id="bean的作用域范围"><a href="#bean的作用域范围" class="headerlink" title="bean的作用域范围"></a>bean的作用域范围</h3><p>prototype    原 型 =&gt; 每次创建一个实例<br>singleton     单 例 =&gt;一个bean的定义，只有一个实例，不是之前那种单例 一个类只有一个<br>request        一个请求一个实例<br>session        一个会话一个实例<br>websocket    一次websocket链接一个实例</p><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p>声明周期两种方式：==只有单例有效果==</p><ol><li><p>自己写开始结束的方法<br>在bean的配置中，添加init-method=“初始化的方法”，destroy-method=“销毁的方法”</p></li><li><p>实现开始结束的接口 重写方法<br>在类上实现InitializingBean,DisposableBean 方法</p></li></ol><h2 id="IoC的配置"><a href="#IoC的配置" class="headerlink" title="IoC的配置"></a>IoC的配置</h2><h3 id="1-通过注解来配置IoC"><a href="#1-通过注解来配置IoC" class="headerlink" title="1. 通过注解来配置IoC"></a>1. 通过注解来配置IoC</h3><p>在XML中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"要扫描的注解的包路径“/&gt;</span></span></span><br></pre></td></tr></table></figure><p>==注解有==<br>@Controller<br>@Service<br>@Repository 这是dao的<br>@Autowired 自动依赖注入 就可以不用setter<br>@Component 不是上面三层的就统一用这个<br>@Value 注入基本数据类型 可以注入配置的值</p><p>作用域用：<br>@Scope（“propertype”）<br>生命周期<br>@PostConstruct  初始化的方法上加<br>@PreDestroy    摧毁的方法上加</p><p>==<strong>当你加了注解的时候，Spring会自动将类名第一个首字母小写作为bean的id，因为是加在类上，所以class也省略配置了</strong>==</p><h3 id="2-Java类配置IoC"><a href="#2-Java类配置IoC" class="headerlink" title="2.Java类配置IoC"></a>2.Java类配置IoC</h3><p><em>使用java类来代替XML</em></p><p><strong>@Configuration 用于标记一个类为配置类<br>@Bean  标记某个方法返回值为spring的bean<br>@ComponentScan（要扫描的包） 打开扫描包的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        第一种推荐 @Bean就是来获得对象的 要注入信息就调用方法</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">        userService.setUserDao(userDao());</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDao();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserController <span class="title">userController</span><span class="params">(UserService userService)</span></span>&#123;</span><br><span class="line"><span class="comment">//        第二种 通过传入参数 spring自己找对应的bean</span></span><br><span class="line">        UserController userController=<span class="keyword">new</span> UserController();</span><br><span class="line">        userController.setUserService(userService);</span><br><span class="line">        <span class="keyword">return</span> userController;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//   获得DruidDataSource</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dds = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"><span class="comment">//        设置每个属性</span></span><br><span class="line">        dds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dds.setPassword(<span class="string">"root123"</span>);</span><br><span class="line">        dds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/demo);</span></span><br><span class="line"><span class="string">        return  dds;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    @Bean</span></span><br><span class="line"><span class="string">    public QueryRunner queryRunner()&#123;</span></span><br><span class="line"><span class="string">//        指定druidDataSource当然也可以不指定 让spring自己去找</span></span><br><span class="line"><span class="string">        QueryRunner qr = new QueryRunner(druidDataSource());</span></span><br><span class="line"><span class="string">        return qr;</span></span><br><span class="line"><span class="string">    &#125;   </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"DataBase.properties"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;driverClassName&#125;"</span>)</span><br><span class="line">String driverClassName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;url&#125;"</span>)</span><br><span class="line">String url;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;username&#125;"</span>)</span><br><span class="line">String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;password&#125;"</span>)</span><br><span class="line">String password;</span><br></pre></td></tr></table></figure><p><strong>在使用的时候就得使用下面的进行调用了</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfigScan<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>@ComponentScan（要扫描的包） 打开扫描包的注解等价于<br>&lt;context:component-scan base-package=”xxx”&gt;</p><p> 这个时候就要用 @Controller @Service 直接生成bean 就不用自己@Bean来生成bean</p><h3 id="多种的混用"><a href="#多种的混用" class="headerlink" title="多种的混用"></a>多种的混用</h3><p>在注解类上可以使用@Import（.class）导入Java配置  用@ImportResource(.xml)导入Xml的配置</p><p>==讲了这么久 讲讲IoC的优势==</p><h3 id="IoC优势"><a href="#IoC优势" class="headerlink" title="IoC优势"></a>IoC优势</h3><ol><li>解耦合 （一个类跟一个类的关系就是耦合度）  降低了类与类之间的耦合度</li><li>提升了代码的灵活性，可维护性。因为一个类可能有多个实现，当不同需求的时候在xml中切换下就行</li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>OOP：这是刚开始学Java就学的面相对象编程<br>今天讨论的是AOP：Aspect Oritented Programming</p><p>AOP：面相切面编程——为了解决公共、系统的问题</p><p><strong>那么哪些是属于公共、系统的问题呢？</strong><br>    比如打印日志，打印参数调用，执行时间，事务管理，安全验证…….</p><p>了解了这些，我们来看下AOP中的名词</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>连接点</strong>：    JoinPoint     需要加入功能的位置(通常是方法)</p><p><strong>切入点</strong>：    Pointcut     真正执行加入功能的连接点，从连接点中选出需要加入功能的连接点</p><p><strong>通知</strong>：        Advice         需要实现的功能</p><p><strong>切面</strong>：        Aspect         Java语言中将切入点和通知组装在一起的代码单元</p><p><strong>目标对象</strong>：    Target         要操作的对象，方法（连接点）所在的对象</p><p><strong>织入</strong>：        Weave         将功能加入到切入点中的过程</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="配置方式1（较为麻烦）"><a href="#配置方式1（较为麻烦）" class="headerlink" title="配置方式1（较为麻烦）"></a>配置方式1（较为麻烦）</h4><ol><li>编写service类<ol start="2"><li>编写通知  ， 实现MethodBeforeAdvice接口（等下详细讲通知）</li><li>配置xml</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.spring.aop.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通知: 实现了打日志的功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beforeExecution"</span> <span class="attr">class</span>=<span class="string">"com.spring.aop.component.BeforeExecution"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--切入点：写到需要增加功能的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pointCut"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.JdkRegexpMethodPointcut"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"com.spring.aop.service.impl.UserServiceImpl.addUser"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--切面：连接切入点和通知，让打日志功能在切入点的位置执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.DefaultPointcutAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pointcut"</span> <span class="attr">ref</span>=<span class="string">"pointCut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"beforeExecution"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包装userService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置方式2-aop：config"><a href="#配置方式2-aop：config" class="headerlink" title="配置方式2 aop：config"></a>配置方式2 aop：config</h4><p>非环绕式的通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tx"</span> <span class="attr">class</span>=<span class="string">"com.demo.Trans"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"tx"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePointcut"</span> <span class="attr">expression</span>=<span class="string">"executon(* com.demo.aop.*.*(..)"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--前置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"begin"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointcut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--后--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"begin"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>expression语法：转载 <a href="https://zhuanlan.zhihu.com/p/63001123" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63001123</a><br>环绕式通知，就只需要一个就够了<br><img src="https://img-blog.csdnimg.cn/20191103122312880.png" alt="在这里插入图片描述"></p><h4 id="注解式配置"><a href="#注解式配置" class="headerlink" title="注解式配置"></a>注解式配置</h4><p><img src="https://img-blog.csdnimg.cn/20191103122444263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注解式的配置切面就如下的配置</strong>：<br>@Aspect  切面<br>@Pointcut    切入点<br>@Around     环绕式<br>@Before     前置<br>@After     后置<br>@AfterThrowing     抛出异常<br>@EnableAspectJAutoProxy  自动扫包等价于aop:aspectj-autoproxy<!-- toc --></p><h2 id="什么是框架-1"><a href="#什么是框架-1" class="headerlink" title="什么是框架?"></a>什么是框架?</h2><p>在特定的领域将总结的最佳实践编写成固定流程，帮助我们更加高效，更为健壮的编写。</p><ol><li><strong>总结的最佳实践</strong> ，这就表明框架已经是完成了一些特定的功能，自己已经实现了一些功能，不同的框架完成了不同的功能；</li><li><strong>固定流程</strong>，说明框架本身是有一套流程，需要实现的功能按照其流程来，就能达到效果。</li><li><strong>帮助我们</strong>，框架本身是不会运行点，在框架的帮助下，配合其他的程序，框架就能有效的帮助我们省去很多步骤，直接调用其本身，来达到功能的实现。<br><img src="https://img-blog.csdnimg.cn/20191102104307835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="框架与程序员的关系"></li></ol><h2 id="Spring概诉-1"><a href="#Spring概诉-1" class="headerlink" title="Spring概诉"></a>Spring概诉</h2><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。</p><p><strong>Spring的核心是控制反转（IoC）和面向切面（AOP）。</strong><br><strong>简单来说，Spring是一个分层的JavaSE/EEfull-stack（一站式）轻量级开源框架。</strong></p><p><del>上面的干货是不是很枯燥，那我们看下Spring</del>   ==集成的模块==</p><h2 id="Spring集成的模块-1"><a href="#Spring集成的模块-1" class="headerlink" title="Spring集成的模块"></a>Spring集成的模块</h2><p><img src="https://img-blog.csdnimg.cn/20191102105609500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="Spring集成模块"><br>1 <strong>核心容器</strong></p><ul><li>Spring-beans:IoC的实现，配置文件的访问、创建和管理；</li><li>Spring-core：核心工具包；</li><li>Spring-context：封装IoC容器，提供扩展功能；</li><li>SpEL:Spring的表达式支持</li></ul><p>2.<strong>基础服务</strong></p><ul><li>AOP：面向切面编程的支持；</li><li>Aspect：模块提供了与 AspectJ 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架；</li><li>Instrumentation：字节码操作；</li><li>Messaging：对消息服务的支持</li></ul><p>3.<strong>功能</strong></p><ul><li>transactions:对事务的支持；</li><li>JDBC:Spring对JDBC的封装；</li><li>ORM：Spring对ORM的封装</li></ul><p>4.<strong>WEB</strong></p><ul><li><p>Web 模块提供面向web的基本功能和面向web的应用上下文，比如多部分（multipart）文件上传功能、使用Servlet监听器初始化IoC容器等。它还包括HTTP客户端以及Spring远程调用中与web相关的部分。。</p></li><li><p>Web-MVC 模块为web应用提供了模型视图控制（MVC）和REST Web服务的实现。Spring的MVC框架可以使领域模型代码和web表单完全地分离，且可以与Spring框架的其它所有功能进行集成。</p></li><li><p>Web-Socket 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</p></li><li><p>Web-Portlet 模块提供了用于Portlet环境的MVC实现，并反映了spring-webmvc模块的功能。</p></li></ul><h2 id="Spring的核心理念——IoC容器-1"><a href="#Spring的核心理念——IoC容器-1" class="headerlink" title="Spring的核心理念——IoC容器"></a>Spring的核心理念——IoC容器</h2><p>在讲解IoC的时候我们先来回想，之前写MVC三层的时候<br><img src="https://img-blog.csdnimg.cn/20191102113512328.png" alt="之前的MVC三层控制权"><br>IoC:Inversion of Control 控制反转，通俗一点就是控制权由调用的类，转为Spring容器，由Spring容器来==创建实例以及依赖注入==。<br><img src="https://img-blog.csdnimg.cn/20191103104511324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="控制反转"></p><h3 id="Bean的四种实例化-1"><a href="#Bean的四种实例化-1" class="headerlink" title="Bean的四种实例化"></a>Bean的四种实例化</h3><p>首先你需要在xml中来，配置bean。</p><ol><li>默认使用的bean就是用的无参构造<br>其中id就表示这个bean的名字，class就是你要创建这个实例的class<br>– <code>&lt;bean id=&quot;userDao&quot; class=&quot;com.demo.dao.UserDaoImpl&quot;/&gt;</code></li><li>静态工厂方法实例化<br>这就运用到一个类中的一个静态方法，这个静态方法get就是用来返回bean的实例<br>– <code>&lt;bean id=&quot;userDao&quot; factory-method=&quot;get&quot;class=&quot;com.UserDaoFactory/&gt;</code></li><li>工厂bean的实例化<br>这个方法就用到了工厂模式，这个工厂的方法get用来生产这个bean的实例<br>– <code>&lt;bean id=&quot;userDaoFactory&quot; class=&quot;com.factory.user.UserDaoFactory&quot;/&gt;    &lt;bean id=&quot;userDao&quot; factory-bean=&quot;userDaoFactory&quot; factory-method=&quot;get&quot;/&gt;</code></li><li>Spring的factorybean接口<br>使用这种方式就是要类已经实现了FactoryBean的接口，然后重写了方法<br><img src="https://img-blog.csdnimg.cn/20191103110313725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>– <code>&lt;bean id=&quot;car&quot; class=&quot;com.demo.dao.CarFactory&quot;/&gt;</code></li></ol><h3 id="依赖注入-1"><a href="#依赖注入-1" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>依赖注入Spring也给我提供了两种方式</p><ol><li>setter注入<br>– 这个方式就是说，你要实例化的对象，必须要有setter方法来设置，然后才能才bean中进行依赖注入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.demo.service.UserServiceImpl/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;bean id="</span><span class="attr">userController</span>" <span class="attr">class</span>=<span class="string">"com.demo.controller.UserController"</span>&gt;</span></span><br><span class="line">//这里的name其实就是调用的setter方法</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//当然你想注入其他类型的时候也是可以的</span><br><span class="line">//value 注入基本类型</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//list 存放基本类型注入list </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//map集合</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构造器注入<br><img src="https://img-blog.csdnimg.cn/20191103111839165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="构造器注入"><br>==看完了这些实例化和依赖注入，再来看看怎么使用吧==<br><img src="https://img-blog.csdnimg.cn/201911031120165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="容器的使用"><br><strong>其中一般来说全局就一个spring容器</strong></li></ol><h3 id="bean的作用域范围-1"><a href="#bean的作用域范围-1" class="headerlink" title="bean的作用域范围"></a>bean的作用域范围</h3><p>prototype    原 型 =&gt; 每次创建一个实例<br>singleton     单 例 =&gt;一个bean的定义，只有一个实例，不是之前那种单例 一个类只有一个<br>request        一个请求一个实例<br>session        一个会话一个实例<br>websocket    一次websocket链接一个实例</p><h3 id="bean的生命周期-1"><a href="#bean的生命周期-1" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p>声明周期两种方式：==只有单例有效果==</p><ol><li><p>自己写开始结束的方法<br>在bean的配置中，添加init-method=“初始化的方法”，destroy-method=“销毁的方法”</p></li><li><p>实现开始结束的接口 重写方法<br>在类上实现InitializingBean,DisposableBean 方法</p></li></ol><h2 id="IoC的配置-1"><a href="#IoC的配置-1" class="headerlink" title="IoC的配置"></a>IoC的配置</h2><h3 id="1-通过注解来配置IoC-1"><a href="#1-通过注解来配置IoC-1" class="headerlink" title="1. 通过注解来配置IoC"></a>1. 通过注解来配置IoC</h3><p>在XML中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"要扫描的注解的包路径“/&gt;</span></span></span><br></pre></td></tr></table></figure><p>==注解有==<br>@Controller<br>@Service<br>@Repository 这是dao的<br>@Autowired 自动依赖注入 就可以不用setter<br>@Component 不是上面三层的就统一用这个<br>@Value 注入基本数据类型 可以注入配置的值</p><p>作用域用：<br>@Scope（“propertype”）<br>生命周期<br>@PostConstruct  初始化的方法上加<br>@PreDestroy    摧毁的方法上加</p><p>==<strong>当你加了注解的时候，Spring会自动将类名第一个首字母小写作为bean的id，因为是加在类上，所以class也省略配置了</strong>==</p><h3 id="2-Java类配置IoC-1"><a href="#2-Java类配置IoC-1" class="headerlink" title="2.Java类配置IoC"></a>2.Java类配置IoC</h3><p><em>使用java类来代替XML</em></p><p><strong>@Configuration 用于标记一个类为配置类<br>@Bean  标记某个方法返回值为spring的bean<br>@ComponentScan（要扫描的包） 打开扫描包的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        第一种推荐 @Bean就是来获得对象的 要注入信息就调用方法</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">        userService.setUserDao(userDao());</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDao();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserController <span class="title">userController</span><span class="params">(UserService userService)</span></span>&#123;</span><br><span class="line"><span class="comment">//        第二种 通过传入参数 spring自己找对应的bean</span></span><br><span class="line">        UserController userController=<span class="keyword">new</span> UserController();</span><br><span class="line">        userController.setUserService(userService);</span><br><span class="line">        <span class="keyword">return</span> userController;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//   获得DruidDataSource</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dds = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"><span class="comment">//        设置每个属性</span></span><br><span class="line">        dds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dds.setPassword(<span class="string">"root123"</span>);</span><br><span class="line">        dds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/demo);</span></span><br><span class="line"><span class="string">        return  dds;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    @Bean</span></span><br><span class="line"><span class="string">    public QueryRunner queryRunner()&#123;</span></span><br><span class="line"><span class="string">//        指定druidDataSource当然也可以不指定 让spring自己去找</span></span><br><span class="line"><span class="string">        QueryRunner qr = new QueryRunner(druidDataSource());</span></span><br><span class="line"><span class="string">        return qr;</span></span><br><span class="line"><span class="string">    &#125;   </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"DataBase.properties"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;driverClassName&#125;"</span>)</span><br><span class="line">String driverClassName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;url&#125;"</span>)</span><br><span class="line">String url;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;username&#125;"</span>)</span><br><span class="line">String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;password&#125;"</span>)</span><br><span class="line">String password;</span><br></pre></td></tr></table></figure><p><strong>在使用的时候就得使用下面的进行调用了</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfigScan<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>@ComponentScan（要扫描的包） 打开扫描包的注解等价于<br>&lt;context:component-scan base-package=”xxx”&gt;</p><p> 这个时候就要用 @Controller @Service 直接生成bean 就不用自己@Bean来生成bean</p><h3 id="多种的混用-1"><a href="#多种的混用-1" class="headerlink" title="多种的混用"></a>多种的混用</h3><p>在注解类上可以使用@Import（.class）导入Java配置  用@ImportResource(.xml)导入Xml的配置</p><p>==讲了这么久 讲讲IoC的优势==</p><h3 id="IoC优势-1"><a href="#IoC优势-1" class="headerlink" title="IoC优势"></a>IoC优势</h3><ol><li>解耦合 （一个类跟一个类的关系就是耦合度）  降低了类与类之间的耦合度</li><li>提升了代码的灵活性，可维护性。因为一个类可能有多个实现，当不同需求的时候在xml中切换下就行</li></ol><h2 id="AOP-1"><a href="#AOP-1" class="headerlink" title="AOP"></a>AOP</h2><p>OOP：这是刚开始学Java就学的面相对象编程<br>今天讨论的是AOP：Aspect Oritented Programming</p><p>AOP：面相切面编程——为了解决公共、系统的问题</p><p><strong>那么哪些是属于公共、系统的问题呢？</strong><br>    比如打印日志，打印参数调用，执行时间，事务管理，安全验证…….</p><p>了解了这些，我们来看下AOP中的名词</p><h3 id="名词解释-1"><a href="#名词解释-1" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>连接点</strong>：    JoinPoint     需要加入功能的位置(通常是方法)</p><p><strong>切入点</strong>：    Pointcut     真正执行加入功能的连接点，从连接点中选出需要加入功能的连接点</p><p><strong>通知</strong>：        Advice         需要实现的功能</p><p><strong>切面</strong>：        Aspect         Java语言中将切入点和通知组装在一起的代码单元</p><p><strong>目标对象</strong>：    Target         要操作的对象，方法（连接点）所在的对象</p><p><strong>织入</strong>：        Weave         将功能加入到切入点中的过程</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><h4 id="配置方式1（较为麻烦）-1"><a href="#配置方式1（较为麻烦）-1" class="headerlink" title="配置方式1（较为麻烦）"></a>配置方式1（较为麻烦）</h4><ol><li>编写service类<ol start="2"><li>编写通知  ， 实现MethodBeforeAdvice接口（等下详细讲通知）</li><li>配置xml</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.spring.aop.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通知: 实现了打日志的功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beforeExecution"</span> <span class="attr">class</span>=<span class="string">"com.spring.aop.component.BeforeExecution"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--切入点：写到需要增加功能的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pointCut"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.JdkRegexpMethodPointcut"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"com.spring.aop.service.impl.UserServiceImpl.addUser"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--切面：连接切入点和通知，让打日志功能在切入点的位置执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.DefaultPointcutAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pointcut"</span> <span class="attr">ref</span>=<span class="string">"pointCut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"beforeExecution"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包装userService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置方式2-aop：config-1"><a href="#配置方式2-aop：config-1" class="headerlink" title="配置方式2 aop：config"></a>配置方式2 aop：config</h4><p>非环绕式的通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tx"</span> <span class="attr">class</span>=<span class="string">"com.demo.Trans"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"tx"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePointcut"</span> <span class="attr">expression</span>=<span class="string">"executon(* com.demo.aop.*.*(..)"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--前置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"begin"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointcut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--后--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"begin"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>expression语法：转载 <a href="https://zhuanlan.zhihu.com/p/63001123" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63001123</a><br>环绕式通知，就只需要一个就够了<br><img src="https://img-blog.csdnimg.cn/20191103122312880.png" alt="在这里插入图片描述"></p><h4 id="注解式配置-1"><a href="#注解式配置-1" class="headerlink" title="注解式配置"></a>注解式配置</h4><p><img src="https://img-blog.csdnimg.cn/20191103122444263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQxNzIxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注解式的配置切面就如下的配置</strong>：<br>@Aspect  切面<br>@Pointcut    切入点<br>@Around     环绕式<br>@Before     前置<br>@After     后置<br>@AfterThrowing     抛出异常<br>@EnableAspectJAutoProxy  自动扫包等价于aop:aspectj-autoproxy</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
